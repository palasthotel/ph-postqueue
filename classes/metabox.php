<?php
/**
 * Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
 * User: jana
 * Date: 12.12.17
 * Time: 18:00
 */

namespace Postqueue;

class MetaBox {

	/**
	 * @var Store
	 */
	public $store;
	
	private $screens;
	
	/**
	 * Post constructor.
	 *
	 * @param Plugin $plugin
	 */
	function __construct(Plugin $plugin) {
		$this->plugin = $plugin;
		$this->store = $plugin->store;
		$this->screens = get_post_types( array('public' => true) ); //@todo could get a setting page where to choose for which post_types postqueues should be available
		/**
		 * registers add_meta_boxes action that adds metaboxes to post edit
		 */
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		
		/**
     * register ajax callbacks for this metabox
     */
     add_action( 'wp_ajax_postqueue_add_post', array( $this, 'ajax_callback_add_post' ) );
     add_action( 'wp_ajax_postqueue_remove_post', array( $this, 'ajax_callback_remove_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
  	
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'postqueue',
				__( 'Postqueue', 'postqueue' ),
				array( $this, 'render' ),
				$screen,
				'advanced',
				'default'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 * 
	 * @param object $post WordPress post object
	 */
	public function render( $post ) {
		wp_enqueue_script(
			'postqueue-metabox',
			$this->plugin->url . 'js/postqueue-metabox.js',
			array( 'jquery' ),
			1,
			false
		);
		wp_localize_script( 'postqueue-metabox', 'objectL10n', array(
  		// @todo
    	'edit' => esc_html__( 'Edit', Plugin::DOMAIN ),
    ) );
		$store = $this->store;
		require $this->plugin->dir .'partials/postqueue-metabox.tpl.php';
	}
	
	/**
   * Callback function for the add post action
   */
	function ajax_callback_add_post() {
  	$post_id = intval( $_POST['postid'] );
  	$queue_id = intval( $_POST['queueid'] );
  	$this->store->add_post_to_queue( $post_id, $queue_id );
  	return true;
	}
	
	/**
   * Callback function for the remove post action
   */
	function ajax_callback_remove_post() {
  	$post_id = intval( $_POST['postid'] );
  	$queue_id = intval( $_POST['queueid'] );
  	$this->store->remove_post_from_queue( $post_id, $queue_id );
  	return true;
	}
}